{{#*inline "page"}}

    <h1 class="h3 mb-4 text-gray-800">Chat application. Server side events with warp</h1>

    <div class="row">
        <div class="col-lg-12">
            <div class="card mb-4 py-3 border-left-success">
                <div class="card-body">
                    <h6 class="m-0 font-weight-bold text-primary">Warp chat</h6>
                    <div id="chat">
                        <p><em>Connecting...</em></p>
                    </div>
                    <input type="text" id="text" />
                    <button class="btn btn-success" type="button" id="send">Send</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <!-- Card Header - Accordion -->
                <a href="#collapseJsSource" class="d-block card-header py-3" data-toggle="collapse" role="button"
                   aria-expanded="true" aria-controls="collapseJsSource">
                    <h6 class="m-0 font-weight-bold text-primary">Java script code.</h6>
                </a>
                <!-- Card Content - Collapse -->
                <div class="collapse show" id="collapseJsSource">
                    <div class="card-body">
                        Source code:
                        <pre>
                        <code class="javascript">
var uri = location.origin + '/chat';
var sse = new EventSource(uri);
function message(data) {
    var line = document.createElement('p');
    line.innerText = data;
    chat.appendChild(line);
}
sse.onopen = function() {
    chat.innerHTML = "&lt;p&gt;&lt;em&gt;Connected!&lt;/em&gt;&lt;/p&gt;";
}
var user_id;
sse.addEventListener("user", function(msg) {
    user_id = msg.data;
});
sse.onmessage = function(msg) {
    message(msg.data);
};
send.onclick = function() {
    var msg = text.value;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", uri + '/' + user_id, true);
    xhr.send(msg);
    text.value = '';
    message('[You]: ' + msg);
};

                        </code>
                    </pre>
                    </div>
                    <a href="https://github.com/lumijad/ruspi-examples/blob/master/ruspi-warp/src/sse/main.rs"
                       class="btn btn-sm header-btn">
                        <i class="fa fa-github-alt"></i>
                        <span>View on GitHub</span>
                    </a>
                </div>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <!-- Card Header - Accordion -->
                <a href="#collapseWarpSource" class="d-block card-header py-3" data-toggle="collapse" role="button"
                   aria-expanded="true" aria-controls="collapseWarpSource">
                    <h6 class="m-0 font-weight-bold text-primary">Server side events with warp.</h6>
                </a>
                <!-- Card Content - Collapse -->
                <div class="collapse show" id="collapseWarpSource">
                    <div class="card-body">
                        Source code:
                        <pre><code class="rust">
use futures::{Stream, StreamExt};
use std::collections::HashMap;
use std::sync::{
    atomic::{AtomicUsize, Ordering},
    Arc, Mutex,
};
use tokio::sync::mpsc;
use warp::{sse::ServerSentEvent, Filter};


#[tokio::main]
async fn main() {
    pretty_env_logger::init();

    // Keep track of all connected users, key is usize, value
    // is an event stream sender.
    let users = Arc::new(Mutex::new(HashMap::new()));
    // Turn our "state" into a new Filter...
    let users = warp::any().map(move || users.clone());

    // POST /chat -> send message
    let chat_send = warp::path("chat")
        .and(warp::post())
        .and(warp::path::param::&lt;usize>())
        .and(warp::body::content_length_limit(500))
        .and(
            warp::body::bytes().and_then(|body: bytes::Bytes| async move {
                std::str::from_utf8(&body)
                    .map(String::from)
                    .map_err(|_e| warp::reject::custom(NotUtf8))
            }),
        )
        .and(users.clone())
        .map(|my_id, msg, users| {
            user_message(my_id, msg, &users);
            warp::reply()
        });

    // GET /chat -> messages stream
    let chat_recv = warp::path("chat").and(warp::get()).and(users).map(|users| {
        // reply using server-sent events
        let stream = user_connected(users);
        warp::sse::reply(warp::sse::keep_alive().stream(stream))
    });

    // GET / -> index html
    let index = warp::path::end().map(|| {
        warp::http::Response::builder()
            .header("content-type", "text/html; charset=utf-8")
            .body(INDEX_HTML)
    });

    let routes = index.or(chat_recv).or(chat_send);

    warp::serve(routes).run(([127, 0, 0, 1], 3030)).await;
}

/// Our global unique user id counter.
static NEXT_USER_ID: AtomicUsize = AtomicUsize::new(1);

/// Message variants.
#[derive(Debug)]
enum Message {
    UserId(usize),
    Reply(String),
}

#[derive(Debug)]
struct NotUtf8;
impl warp::reject::Reject for NotUtf8 {}

/// Our state of currently connected users.
///
/// - Key is their id
/// - Value is a sender of `Message`
type Users = Arc&lt;Mutex&lt;HashMap&lt;usize, mpsc::UnboundedSender&lt;Message>>>>;

fn user_connected(
    users: Users,
) -> impl Stream&lt;Item = Result&lt;impl ServerSentEvent + Send + 'static, warp::Error>> + Send + 'static
{
    // Use a counter to assign a new unique ID for this user.
    let my_id = NEXT_USER_ID.fetch_add(1, Ordering::Relaxed);

    eprintln!("new chat user: {}", my_id);

    // Use an unbounded channel to handle buffering and flushing of messages
    // to the event source...
    let (tx, rx) = mpsc::unbounded_channel();

    tx.send(Message::UserId(my_id))
        // rx is right above, so this cannot fail
        .unwrap();

    // Save the sender in our list of connected users.
    users.lock().unwrap().insert(my_id, tx);

    // Convert messages into Server-Sent Events and return resulting stream.
    rx.map(|msg| match msg {
        Message::UserId(my_id) => Ok((warp::sse::event("user"), warp::sse::data(my_id)).into_a()),
        Message::Reply(reply) => Ok(warp::sse::data(reply).into_b()),
    })
}

fn user_message(my_id: usize, msg: String, users: &Users) {
    let new_msg = format!("&lt;User#{}>: {}", my_id, msg);

    // New message from this user, send it to everyone else (except same uid)...
    //
    // We use `retain` instead of a for loop so that we can reap any user that
    // appears to have disconnected.
    users.lock().unwrap().retain(|uid, tx| {
        if my_id == *uid {
            // don't send to same user, but do retain
            true
        } else {
            // If not `is_ok`, the SSE stream is gone, and so don't retain
            tx.send(Message::Reply(new_msg.clone())).is_ok()
        }
    });
}

                        </code></pre>
                    </div>
                    <a href="https://github.com/lumijad/ruspi-examples/blob/master/ruspi-warp/src/sse/main.rs"
                       class="btn btn-sm header-btn">
                        <i class="fa fa-github-alt"></i>
                        <span>View on GitHub</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
var uri = location.origin + '/sse/chat';
var sse = new EventSource(uri);
function message(data) {
    var line = document.createElement('p');
    line.innerText = data;
    chat.appendChild(line);
}
sse.onopen = function() {
    chat.innerHTML = "<p><em>Connected!</em></p>";
}
var user_id;
sse.addEventListener("user", function(msg) {
    user_id = msg.data;
});
sse.onmessage = function(msg) {
    message(msg.data);
};
send.onclick = function() {
    var msg = text.value;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", uri + '/' + user_id, true);
    xhr.send(msg);
    text.value = '';
    message('[You]: ' + msg);
};
    </script>
{{/inline}}
{{~> (layout)~}}
