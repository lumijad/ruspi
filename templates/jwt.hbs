{{#*inline "page"}}
    <h1 class="h3 mb-4 text-gray-800">JSON Web Token</h1>

    <div class="row">
        <div class="col-lg-12">
            <div class="card mb-4 py-3 border-left-success">
                <div class="card-body">
                    <p>
                        JSON Web Tokens (JWT) are an open, internet standard (RFC 7519) method for representing claims securely between two parties.
                    </p>
                    <p>
                        JSON Web Token is for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims.
                        The tokens are signed either using a private secret or a public/private key. In this examplewe will use a secret key.
                        For example, a server could generate a token that has the claim "admin" and provide that to a client.
                        The client could then use that token to prove that he is an admin.
                    </p>

                    <p>
                        The following example is based on the crate <a href="https://docs.rs/jsonwebtoken/">jsonwebtoken</a>
                    </p>
                    <pre>
                        <code class="rust">
#[derive(Debug, Clone)]
pub struct Claims {
    sub: String,
    exp: u64,
    // seconds since the epoch
    auth: Vec&lt;String>,
}

impl Claims {
    fn new(user_id: String, auth: Vec&lt;String>) -> Self {
        Self {
            sub: user_id,
            exp: (Utc::now() + Duration::hours(12)).timestamp() as u64,
            auth,
        }
    }

    pub fn user_id(&self) -> String {
        self.sub.to_string()
    }
}

pub fn encode_token(secret: &str, sub: String, auth: Vec&lt;String>) -> String {
    encode(
        &Header::default(),
        &Claims::new(sub, auth),
        &EncodingKey::from_secret(secret.as_ref()),
    ).unwrap()
}

pub fn decode_token(secret: &str, token: &str) -> errors::Result&lt;Claims> {
    decode::&lt;laims>(
        token,
        &DecodingKey::from_secret(secret.as_ref()),
        &Validation::default(),
    ).map(|token_data| token_data.claims)
}

                        </code>
                    </pre>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card shadow mb-4">
                <!-- Card Header - Accordion -->
                <a href="#collapseWarpSource" class="d-block card-header py-3" data-toggle="collapse" role="button"
                   aria-expanded="true" aria-controls="collapseWarpSource">
                    <h6 class="m-0 font-weight-bold text-primary">JSON Web Token</h6>
                </a>
                <!-- Card Content - Collapse -->
                <div class="collapse show" id="collapseWarpSource">
                    <div class="card-body">
                        <p>A full code example with a simple login function:</p>
                        <pre><code class="rust">
use argon2::{self, Config};
use chrono::{Duration, Utc};
use jsonwebtoken::{decode, DecodingKey, encode, EncodingKey, errors, Header, Validation};
use rand::Rng;
use serde::{Deserialize, Serialize};

pub fn hash(password: &[u8]) -> String {
    let salt = rand::thread_rng().gen::<[u8; 32]>();
    let config = Config::default();
    argon2::hash_encoded(password, &salt, &config).unwrap()
}

pub fn verify(hash: &str, password: &[u8]) -> bool {
    argon2::verify_encoded(hash, password).unwrap_or(false)
}

#[derive(Deserialize, Serialize, Debug, Clone)]
pub struct Claims {
    sub: String,
    exp: u64,
    // seconds since the epoch
    auth: Vec&lt;String>,
}

impl Claims {
    fn new(user_id: String, auth: Vec&lt;String>) -> Self {
        Self {
            sub: user_id,
            exp: (Utc::now() + Duration::hours(12)).timestamp() as u64,
            auth,
        }
    }

    pub fn user_id(&self) -> String {
        self.sub.to_string()
    }
}

pub fn encode_token(secret: &str, sub: String, auth: Vec&lt;String>) -> String {
    encode(
        &Header::default(),
        &Claims::new(sub, auth),
        &EncodingKey::from_secret(secret.as_ref()),
    ).unwrap()
}

pub fn decode_token(secret: &str, token: &str) -> errors::Result&lt;Claims> {
    decode::&lt;laims>(
        token,
        &DecodingKey::from_secret(secret.as_ref()),
        &Validation::default(),
    ).map(|token_data| token_data.claims)
}

pub fn login(username: String, password: String, jwt_secret: String) -> String {
    let hashed_password = "$argon2i$v=19$m=4096,t=3,p=1$wBNL0yEpl0+lx5jp28bwsYwQVJ5oMBVm8Yi5WFXtguo$Cz0CHGSf8rzg9y/Rq6pMOzT5o82UZqIixyPyKf2R54A";

    if username != "admin".to_string() {
        panic!("Invalid username");
    }

    if !verify(hashed_password, password.as_bytes()) {
        panic!("Invalid password");
    }

    let rights = vec!["admin".to_string(), "user".to_string()];
    let token = encode_token(&jwt_secret, username, rights);

    token
}


fn main() {
    let jwt_secret = String::from("d302886ecca83222a392f6549e520dacbd95dc65f1a303f8c571ca3bb9b8e196");

    let username = String::from("admin");
    let password = String::from("Admin!");

    let token = login(username, password, jwt_secret.clone());

    println!("Token: {}", token);

    let claims = decode_token(&jwt_secret, &token).unwrap();

    println!("Claims: {:?}", claims);
}
                        </code></pre>

                    </div>
                    <a href="https://github.com/lumijad/ruspi-examples/blob/master/ruspi-warp/src/jwt/main.rs"
                       class="btn btn-sm header-btn">
                        <i class="fa fa-github-alt"></i>
                        <span>View on GitHub</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
{{/inline}}
{{~> (layout)~}}
